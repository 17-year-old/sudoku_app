// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

enum Level {
  easy,
  medium,
  hard,
  expert,
  custom,
}

class Region {
  Region({
    required this.regionType,
    required this.regionIndex,
  });

  int regionType;

  int regionIndex;

  Object encode() {
    return <Object?>[
      regionType,
      regionIndex,
    ];
  }

  static Region decode(Object result) {
    result as List<Object?>;
    return Region(
      regionType: result[0]! as int,
      regionIndex: result[1]! as int,
    );
  }
}

class DirectHint {
  DirectHint({
    required this.cellIndex,
    required this.cellValue,
    required this.HintMessage,
    required this.regions,
  });

  int cellIndex;

  int cellValue;

  String HintMessage;

  List<Region?> regions;

  Object encode() {
    return <Object?>[
      cellIndex,
      cellValue,
      HintMessage,
      regions,
    ];
  }

  static DirectHint decode(Object result) {
    result as List<Object?>;
    return DirectHint(
      cellIndex: result[0]! as int,
      cellValue: result[1]! as int,
      HintMessage: result[2]! as String,
      regions: (result[3] as List<Object?>?)!.cast<Region?>(),
    );
  }
}

class Link {
  Link({
    required this.srcCellIndex,
    required this.srcCellValue,
    required this.dstCellIndex,
    required this.dstCellValue,
  });

  int srcCellIndex;

  int srcCellValue;

  int dstCellIndex;

  int dstCellValue;

  Object encode() {
    return <Object?>[
      srcCellIndex,
      srcCellValue,
      dstCellIndex,
      dstCellValue,
    ];
  }

  static Link decode(Object result) {
    result as List<Object?>;
    return Link(
      srcCellIndex: result[0]! as int,
      srcCellValue: result[1]! as int,
      dstCellIndex: result[2]! as int,
      dstCellValue: result[3]! as int,
    );
  }
}

class IndirectHint {
  IndirectHint({
    this.cellIndex,
    this.cellValue,
    this.HintMessage,
    this.regions,
    this.selectedCells,
    this.removablePotentials,
    this.redPotentials,
    this.greenPotentials,
    this.links,
    this.addPotentials,
  });

  int? cellIndex;

  int? cellValue;

  String? HintMessage;

  List<Region?>? regions;

  List<int?>? selectedCells;

  Map<int?, Object?>? removablePotentials;

  Map<int?, Object?>? redPotentials;

  Map<int?, Object?>? greenPotentials;

  List<Link?>? links;

  Map<int?, Object?>? addPotentials;

  Object encode() {
    return <Object?>[
      cellIndex,
      cellValue,
      HintMessage,
      regions,
      selectedCells,
      removablePotentials,
      redPotentials,
      greenPotentials,
      links,
      addPotentials,
    ];
  }

  static IndirectHint decode(Object result) {
    result as List<Object?>;
    return IndirectHint(
      cellIndex: result[0] as int?,
      cellValue: result[1] as int?,
      HintMessage: result[2] as String?,
      regions: (result[3] as List<Object?>?)?.cast<Region?>(),
      selectedCells: (result[4] as List<Object?>?)?.cast<int?>(),
      removablePotentials: (result[5] as Map<Object?, Object?>?)?.cast<int?, Object?>(),
      redPotentials: (result[6] as Map<Object?, Object?>?)?.cast<int?, Object?>(),
      greenPotentials: (result[7] as Map<Object?, Object?>?)?.cast<int?, Object?>(),
      links: (result[8] as List<Object?>?)?.cast<Link?>(),
      addPotentials: (result[9] as Map<Object?, Object?>?)?.cast<int?, Object?>(),
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is Level) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is Region) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is DirectHint) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is Link) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is IndirectHint) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Level.values[value];
      case 130: 
        return Region.decode(readValue(buffer)!);
      case 131: 
        return DirectHint.decode(readValue(buffer)!);
      case 132: 
        return Link.decode(readValue(buffer)!);
      case 133: 
        return IndirectHint.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativeSudokuApi {
  /// Constructor for [NativeSudokuApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeSudokuApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<Int32List> generate(Level level) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sudoku.NativeSudokuApi.generate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[level]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Int32List?)!;
    }
  }

  Future<int> checkValidity(Int32List data) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sudoku.NativeSudokuApi.checkValidity$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[data]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<String> analyse(Int32List data, Int32List PotentialValues) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sudoku.NativeSudokuApi.analyse$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[data, PotentialValues]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<double> difficulty(Int32List data) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sudoku.NativeSudokuApi.difficulty$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[data]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as double?)!;
    }
  }

  Future<DirectHint?> getDirectHint(Int32List data) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sudoku.NativeSudokuApi.getDirectHint$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[data]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as DirectHint?);
    }
  }

  Future<IndirectHint?> getIndirectHint(Int32List data, Int32List PotentialValues) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sudoku.NativeSudokuApi.getIndirectHint$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[data, PotentialValues]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as IndirectHint?);
    }
  }

  Future<Int32List> solve(Int32List data) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.sudoku.NativeSudokuApi.solve$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[data]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Int32List?)!;
    }
  }
}
