// Autogenerated from Pigeon (v22.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.fubailin.sudoku;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class SudokuApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum Level {
    EASY(0),
    MEDIUM(1),
    HARD(2),
    EXPERT(3),
    CUSTOM(4);

    final int index;

    Level(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Region {
    private @NonNull Long regionType;

    public @NonNull Long getRegionType() {
      return regionType;
    }

    public void setRegionType(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"regionType\" is null.");
      }
      this.regionType = setterArg;
    }

    private @NonNull Long regionIndex;

    public @NonNull Long getRegionIndex() {
      return regionIndex;
    }

    public void setRegionIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"regionIndex\" is null.");
      }
      this.regionIndex = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Region() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Region that = (Region) o;
      return regionType.equals(that.regionType) && regionIndex.equals(that.regionIndex);
    }

    @Override
    public int hashCode() {
      return Objects.hash(regionType, regionIndex);
    }

    public static final class Builder {

      private @Nullable Long regionType;

      @CanIgnoreReturnValue
      public @NonNull Builder setRegionType(@NonNull Long setterArg) {
        this.regionType = setterArg;
        return this;
      }

      private @Nullable Long regionIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setRegionIndex(@NonNull Long setterArg) {
        this.regionIndex = setterArg;
        return this;
      }

      public @NonNull Region build() {
        Region pigeonReturn = new Region();
        pigeonReturn.setRegionType(regionType);
        pigeonReturn.setRegionIndex(regionIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(regionType);
      toListResult.add(regionIndex);
      return toListResult;
    }

    static @NonNull Region fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Region pigeonResult = new Region();
      Object regionType = pigeonVar_list.get(0);
      pigeonResult.setRegionType((Long) regionType);
      Object regionIndex = pigeonVar_list.get(1);
      pigeonResult.setRegionIndex((Long) regionIndex);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DirectHint {
    private @NonNull Long cellIndex;

    public @NonNull Long getCellIndex() {
      return cellIndex;
    }

    public void setCellIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cellIndex\" is null.");
      }
      this.cellIndex = setterArg;
    }

    private @NonNull Long cellValue;

    public @NonNull Long getCellValue() {
      return cellValue;
    }

    public void setCellValue(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"cellValue\" is null.");
      }
      this.cellValue = setterArg;
    }

    private @NonNull String HintMessage;

    public @NonNull String getHintMessage() {
      return HintMessage;
    }

    public void setHintMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"HintMessage\" is null.");
      }
      this.HintMessage = setterArg;
    }

    private @NonNull List<Region> regions;

    public @NonNull List<Region> getRegions() {
      return regions;
    }

    public void setRegions(@NonNull List<Region> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"regions\" is null.");
      }
      this.regions = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    DirectHint() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      DirectHint that = (DirectHint) o;
      return cellIndex.equals(that.cellIndex) && cellValue.equals(that.cellValue) && HintMessage.equals(that.HintMessage) && regions.equals(that.regions);
    }

    @Override
    public int hashCode() {
      return Objects.hash(cellIndex, cellValue, HintMessage, regions);
    }

    public static final class Builder {

      private @Nullable Long cellIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setCellIndex(@NonNull Long setterArg) {
        this.cellIndex = setterArg;
        return this;
      }

      private @Nullable Long cellValue;

      @CanIgnoreReturnValue
      public @NonNull Builder setCellValue(@NonNull Long setterArg) {
        this.cellValue = setterArg;
        return this;
      }

      private @Nullable String HintMessage;

      @CanIgnoreReturnValue
      public @NonNull Builder setHintMessage(@NonNull String setterArg) {
        this.HintMessage = setterArg;
        return this;
      }

      private @Nullable List<Region> regions;

      @CanIgnoreReturnValue
      public @NonNull Builder setRegions(@NonNull List<Region> setterArg) {
        this.regions = setterArg;
        return this;
      }

      public @NonNull DirectHint build() {
        DirectHint pigeonReturn = new DirectHint();
        pigeonReturn.setCellIndex(cellIndex);
        pigeonReturn.setCellValue(cellValue);
        pigeonReturn.setHintMessage(HintMessage);
        pigeonReturn.setRegions(regions);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(cellIndex);
      toListResult.add(cellValue);
      toListResult.add(HintMessage);
      toListResult.add(regions);
      return toListResult;
    }

    static @NonNull DirectHint fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      DirectHint pigeonResult = new DirectHint();
      Object cellIndex = pigeonVar_list.get(0);
      pigeonResult.setCellIndex((Long) cellIndex);
      Object cellValue = pigeonVar_list.get(1);
      pigeonResult.setCellValue((Long) cellValue);
      Object HintMessage = pigeonVar_list.get(2);
      pigeonResult.setHintMessage((String) HintMessage);
      Object regions = pigeonVar_list.get(3);
      pigeonResult.setRegions((List<Region>) regions);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Link {
    private @NonNull Long srcCellIndex;

    public @NonNull Long getSrcCellIndex() {
      return srcCellIndex;
    }

    public void setSrcCellIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"srcCellIndex\" is null.");
      }
      this.srcCellIndex = setterArg;
    }

    private @NonNull Long srcCellValue;

    public @NonNull Long getSrcCellValue() {
      return srcCellValue;
    }

    public void setSrcCellValue(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"srcCellValue\" is null.");
      }
      this.srcCellValue = setterArg;
    }

    private @NonNull Long dstCellIndex;

    public @NonNull Long getDstCellIndex() {
      return dstCellIndex;
    }

    public void setDstCellIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dstCellIndex\" is null.");
      }
      this.dstCellIndex = setterArg;
    }

    private @NonNull Long dstCellValue;

    public @NonNull Long getDstCellValue() {
      return dstCellValue;
    }

    public void setDstCellValue(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dstCellValue\" is null.");
      }
      this.dstCellValue = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Link() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Link that = (Link) o;
      return srcCellIndex.equals(that.srcCellIndex) && srcCellValue.equals(that.srcCellValue) && dstCellIndex.equals(that.dstCellIndex) && dstCellValue.equals(that.dstCellValue);
    }

    @Override
    public int hashCode() {
      return Objects.hash(srcCellIndex, srcCellValue, dstCellIndex, dstCellValue);
    }

    public static final class Builder {

      private @Nullable Long srcCellIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setSrcCellIndex(@NonNull Long setterArg) {
        this.srcCellIndex = setterArg;
        return this;
      }

      private @Nullable Long srcCellValue;

      @CanIgnoreReturnValue
      public @NonNull Builder setSrcCellValue(@NonNull Long setterArg) {
        this.srcCellValue = setterArg;
        return this;
      }

      private @Nullable Long dstCellIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setDstCellIndex(@NonNull Long setterArg) {
        this.dstCellIndex = setterArg;
        return this;
      }

      private @Nullable Long dstCellValue;

      @CanIgnoreReturnValue
      public @NonNull Builder setDstCellValue(@NonNull Long setterArg) {
        this.dstCellValue = setterArg;
        return this;
      }

      public @NonNull Link build() {
        Link pigeonReturn = new Link();
        pigeonReturn.setSrcCellIndex(srcCellIndex);
        pigeonReturn.setSrcCellValue(srcCellValue);
        pigeonReturn.setDstCellIndex(dstCellIndex);
        pigeonReturn.setDstCellValue(dstCellValue);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(4);
      toListResult.add(srcCellIndex);
      toListResult.add(srcCellValue);
      toListResult.add(dstCellIndex);
      toListResult.add(dstCellValue);
      return toListResult;
    }

    static @NonNull Link fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Link pigeonResult = new Link();
      Object srcCellIndex = pigeonVar_list.get(0);
      pigeonResult.setSrcCellIndex((Long) srcCellIndex);
      Object srcCellValue = pigeonVar_list.get(1);
      pigeonResult.setSrcCellValue((Long) srcCellValue);
      Object dstCellIndex = pigeonVar_list.get(2);
      pigeonResult.setDstCellIndex((Long) dstCellIndex);
      Object dstCellValue = pigeonVar_list.get(3);
      pigeonResult.setDstCellValue((Long) dstCellValue);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class IndirectHint {
    private @Nullable Long cellIndex;

    public @Nullable Long getCellIndex() {
      return cellIndex;
    }

    public void setCellIndex(@Nullable Long setterArg) {
      this.cellIndex = setterArg;
    }

    private @Nullable Long cellValue;

    public @Nullable Long getCellValue() {
      return cellValue;
    }

    public void setCellValue(@Nullable Long setterArg) {
      this.cellValue = setterArg;
    }

    private @Nullable String HintMessage;

    public @Nullable String getHintMessage() {
      return HintMessage;
    }

    public void setHintMessage(@Nullable String setterArg) {
      this.HintMessage = setterArg;
    }

    private @Nullable List<Region> regions;

    public @Nullable List<Region> getRegions() {
      return regions;
    }

    public void setRegions(@Nullable List<Region> setterArg) {
      this.regions = setterArg;
    }

    private @Nullable List<Long> selectedCells;

    public @Nullable List<Long> getSelectedCells() {
      return selectedCells;
    }

    public void setSelectedCells(@Nullable List<Long> setterArg) {
      this.selectedCells = setterArg;
    }

    private @Nullable Map<Long, Object> removablePotentials;

    public @Nullable Map<Long, Object> getRemovablePotentials() {
      return removablePotentials;
    }

    public void setRemovablePotentials(@Nullable Map<Long, Object> setterArg) {
      this.removablePotentials = setterArg;
    }

    private @Nullable Map<Long, Object> redPotentials;

    public @Nullable Map<Long, Object> getRedPotentials() {
      return redPotentials;
    }

    public void setRedPotentials(@Nullable Map<Long, Object> setterArg) {
      this.redPotentials = setterArg;
    }

    private @Nullable Map<Long, Object> greenPotentials;

    public @Nullable Map<Long, Object> getGreenPotentials() {
      return greenPotentials;
    }

    public void setGreenPotentials(@Nullable Map<Long, Object> setterArg) {
      this.greenPotentials = setterArg;
    }

    private @Nullable List<Link> links;

    public @Nullable List<Link> getLinks() {
      return links;
    }

    public void setLinks(@Nullable List<Link> setterArg) {
      this.links = setterArg;
    }

    private @Nullable Map<Long, Object> addPotentials;

    public @Nullable Map<Long, Object> getAddPotentials() {
      return addPotentials;
    }

    public void setAddPotentials(@Nullable Map<Long, Object> setterArg) {
      this.addPotentials = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      IndirectHint that = (IndirectHint) o;
      return Objects.equals(cellIndex, that.cellIndex) && Objects.equals(cellValue, that.cellValue) && Objects.equals(HintMessage, that.HintMessage) && Objects.equals(regions, that.regions) && Objects.equals(selectedCells, that.selectedCells) && Objects.equals(removablePotentials, that.removablePotentials) && Objects.equals(redPotentials, that.redPotentials) && Objects.equals(greenPotentials, that.greenPotentials) && Objects.equals(links, that.links) && Objects.equals(addPotentials, that.addPotentials);
    }

    @Override
    public int hashCode() {
      return Objects.hash(cellIndex, cellValue, HintMessage, regions, selectedCells, removablePotentials, redPotentials, greenPotentials, links, addPotentials);
    }

    public static final class Builder {

      private @Nullable Long cellIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setCellIndex(@Nullable Long setterArg) {
        this.cellIndex = setterArg;
        return this;
      }

      private @Nullable Long cellValue;

      @CanIgnoreReturnValue
      public @NonNull Builder setCellValue(@Nullable Long setterArg) {
        this.cellValue = setterArg;
        return this;
      }

      private @Nullable String HintMessage;

      @CanIgnoreReturnValue
      public @NonNull Builder setHintMessage(@Nullable String setterArg) {
        this.HintMessage = setterArg;
        return this;
      }

      private @Nullable List<Region> regions;

      @CanIgnoreReturnValue
      public @NonNull Builder setRegions(@Nullable List<Region> setterArg) {
        this.regions = setterArg;
        return this;
      }

      private @Nullable List<Long> selectedCells;

      @CanIgnoreReturnValue
      public @NonNull Builder setSelectedCells(@Nullable List<Long> setterArg) {
        this.selectedCells = setterArg;
        return this;
      }

      private @Nullable Map<Long, Object> removablePotentials;

      @CanIgnoreReturnValue
      public @NonNull Builder setRemovablePotentials(@Nullable Map<Long, Object> setterArg) {
        this.removablePotentials = setterArg;
        return this;
      }

      private @Nullable Map<Long, Object> redPotentials;

      @CanIgnoreReturnValue
      public @NonNull Builder setRedPotentials(@Nullable Map<Long, Object> setterArg) {
        this.redPotentials = setterArg;
        return this;
      }

      private @Nullable Map<Long, Object> greenPotentials;

      @CanIgnoreReturnValue
      public @NonNull Builder setGreenPotentials(@Nullable Map<Long, Object> setterArg) {
        this.greenPotentials = setterArg;
        return this;
      }

      private @Nullable List<Link> links;

      @CanIgnoreReturnValue
      public @NonNull Builder setLinks(@Nullable List<Link> setterArg) {
        this.links = setterArg;
        return this;
      }

      private @Nullable Map<Long, Object> addPotentials;

      @CanIgnoreReturnValue
      public @NonNull Builder setAddPotentials(@Nullable Map<Long, Object> setterArg) {
        this.addPotentials = setterArg;
        return this;
      }

      public @NonNull IndirectHint build() {
        IndirectHint pigeonReturn = new IndirectHint();
        pigeonReturn.setCellIndex(cellIndex);
        pigeonReturn.setCellValue(cellValue);
        pigeonReturn.setHintMessage(HintMessage);
        pigeonReturn.setRegions(regions);
        pigeonReturn.setSelectedCells(selectedCells);
        pigeonReturn.setRemovablePotentials(removablePotentials);
        pigeonReturn.setRedPotentials(redPotentials);
        pigeonReturn.setGreenPotentials(greenPotentials);
        pigeonReturn.setLinks(links);
        pigeonReturn.setAddPotentials(addPotentials);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(10);
      toListResult.add(cellIndex);
      toListResult.add(cellValue);
      toListResult.add(HintMessage);
      toListResult.add(regions);
      toListResult.add(selectedCells);
      toListResult.add(removablePotentials);
      toListResult.add(redPotentials);
      toListResult.add(greenPotentials);
      toListResult.add(links);
      toListResult.add(addPotentials);
      return toListResult;
    }

    static @NonNull IndirectHint fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      IndirectHint pigeonResult = new IndirectHint();
      Object cellIndex = pigeonVar_list.get(0);
      pigeonResult.setCellIndex((Long) cellIndex);
      Object cellValue = pigeonVar_list.get(1);
      pigeonResult.setCellValue((Long) cellValue);
      Object HintMessage = pigeonVar_list.get(2);
      pigeonResult.setHintMessage((String) HintMessage);
      Object regions = pigeonVar_list.get(3);
      pigeonResult.setRegions((List<Region>) regions);
      Object selectedCells = pigeonVar_list.get(4);
      pigeonResult.setSelectedCells((List<Long>) selectedCells);
      Object removablePotentials = pigeonVar_list.get(5);
      pigeonResult.setRemovablePotentials((Map<Long, Object>) removablePotentials);
      Object redPotentials = pigeonVar_list.get(6);
      pigeonResult.setRedPotentials((Map<Long, Object>) redPotentials);
      Object greenPotentials = pigeonVar_list.get(7);
      pigeonResult.setGreenPotentials((Map<Long, Object>) greenPotentials);
      Object links = pigeonVar_list.get(8);
      pigeonResult.setLinks((List<Link>) links);
      Object addPotentials = pigeonVar_list.get(9);
      pigeonResult.setAddPotentials((Map<Long, Object>) addPotentials);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129: {
          Object value = readValue(buffer);
          return value == null ? null : Level.values()[((Long) value).intValue()];
        }
        case (byte) 130:
          return Region.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return DirectHint.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return Link.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return IndirectHint.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Level) {
        stream.write(129);
        writeValue(stream, value == null ? null : ((Level) value).index);
      } else if (value instanceof Region) {
        stream.write(130);
        writeValue(stream, ((Region) value).toList());
      } else if (value instanceof DirectHint) {
        stream.write(131);
        writeValue(stream, ((DirectHint) value).toList());
      } else if (value instanceof Link) {
        stream.write(132);
        writeValue(stream, ((Link) value).toList());
      } else if (value instanceof IndirectHint) {
        stream.write(133);
        writeValue(stream, ((IndirectHint) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NativeSudokuApi {

    void generate(@NonNull Level level, @NonNull Result<int[]> result);

    void checkValidity(@NonNull int[] data, @NonNull Result<Long> result);

    void analyse(@NonNull int[] data, @NonNull int[] PotentialValues, @NonNull Result<String> result);

    void difficulty(@NonNull int[] data, @NonNull Result<Double> result);

    void getDirectHint(@NonNull int[] data, @NonNull NullableResult<DirectHint> result);

    void getIndirectHint(@NonNull int[] data, @NonNull int[] PotentialValues, @NonNull NullableResult<IndirectHint> result);

    void solve(@NonNull int[] data, @NonNull Result<int[]> result);

    /** The codec used by NativeSudokuApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `NativeSudokuApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable NativeSudokuApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable NativeSudokuApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sudoku.NativeSudokuApi.generate" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Level levelArg = (Level) args.get(0);
                Result<int[]> resultCallback =
                    new Result<int[]>() {
                      public void success(int[] result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.generate(levelArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sudoku.NativeSudokuApi.checkValidity" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                int[] dataArg = (int[]) args.get(0);
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.checkValidity(dataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sudoku.NativeSudokuApi.analyse" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                int[] dataArg = (int[]) args.get(0);
                int[] PotentialValuesArg = (int[]) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.analyse(dataArg, PotentialValuesArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sudoku.NativeSudokuApi.difficulty" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                int[] dataArg = (int[]) args.get(0);
                Result<Double> resultCallback =
                    new Result<Double>() {
                      public void success(Double result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.difficulty(dataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sudoku.NativeSudokuApi.getDirectHint" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                int[] dataArg = (int[]) args.get(0);
                NullableResult<DirectHint> resultCallback =
                    new NullableResult<DirectHint>() {
                      public void success(DirectHint result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getDirectHint(dataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sudoku.NativeSudokuApi.getIndirectHint" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                int[] dataArg = (int[]) args.get(0);
                int[] PotentialValuesArg = (int[]) args.get(1);
                NullableResult<IndirectHint> resultCallback =
                    new NullableResult<IndirectHint>() {
                      public void success(IndirectHint result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getIndirectHint(dataArg, PotentialValuesArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.sudoku.NativeSudokuApi.solve" + messageChannelSuffix, getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                int[] dataArg = (int[]) args.get(0);
                Result<int[]> resultCallback =
                    new Result<int[]>() {
                      public void success(int[] result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.solve(dataArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
